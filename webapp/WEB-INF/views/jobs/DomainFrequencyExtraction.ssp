<%@ val user: org.archive.webservices.ars.ait.AitUser %>
<%@ val collection: org.archive.webservices.ars.model.ArsCloudCollection %>
<%@ val job: org.archive.webservices.ars.processing.DerivationJobInstance %>
<%@ val files: Seq[org.archive.webservices.ars.model.DerivativeOutput] %>
<%@ val resultSize: Long %>
<%@ val topDomains: Seq[(String, Int)] %>

<% layout("/layouts/job.ssp") { %>

<div class="row">
    <div class="large-12 columns">
        <div class="charts">
          <h1>Domains</h1>
          <p>
            <div class="chartjs-wrapper">
              <canvas id="chartjs-1" class="chartjs" width="undefined" height="undefined"></canvas>
              <script>
                new Chart(document.getElementById("chartjs-1"),
                    {
                      "type":"bar",
                      "data":{
                          "labels":[<%=unescape(topDomains.map("\"" + _._1 + "\"").mkString(","))%>],
                          "datasets":[{
                              "label": "",
                              "data":[<%=topDomains.map(_._2).mkString(",") %>],
                              //"data":[52329, 2993, 1345, 214, 214, 214, 214, 214, 214, 214],
                              "fill":false,
                              "backgroundColor":['#001cbb', '#373ac1', '#5054c8', '#656dce', '#7787d3', '#89a1d8', '#9cbadc', '#b1d4e0', '#ccece2', '#ffffe0']
                          }]},
                      "options":{
                          "legend":{
                              "display":false
                          },
                          "scales":{
                              "yAxes":[{
                                  "ticks":{
                                      "beginAtZero":true,
                                      "callback": function(value, index, values) {
                                          if(parseInt(value) >= 1000){
                                            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                          } else {
                                              return value;
                                            }
                                          }
                                      }
                                  }]
                              }
                          }
                    }
                );
              </script>
            </div>
          </p>
          <div class="text-right">
            <a id="button" aria-describedby="tooltip">What does this graph show?</a>
            <div id="tooltip" role="tooltip">
              This graph shows the top 10 domains that occur in this collection.
              <div id="arrow" data-popper-arrow></div>
            </div>
          </div>
          <script>
            const button = document.querySelector('#button');
            const tooltip = document.querySelector('#tooltip');

            const popperInstance = Popper.createPopper(button, tooltip, {
              modifiers: [
                {
                  name: 'offset',
                  options: {
                    offset: [20, 20],
                  },
                },
              ],
            });

            function show() {
              // Make the tooltip visible
              tooltip.setAttribute('data-show', '');

              // Enable the event listeners
              popperInstance.setOptions({
                modifiers: [{ name: 'eventListeners', enabled: true }],
              });

              // Update its position
              popperInstance.update();
            }

            function hide() {
              // Hide the tooltip
              tooltip.removeAttribute('data-show');

              // Disable the event listeners
              popperInstance.setOptions({
                modifiers: [{ name: 'eventListeners', enabled: false }],
              });
            }

            const showEvents = ['mouseenter', 'focus'];
            const hideEvents = ['mouseleave', 'blur'];

            showEvents.forEach(event => {
              button.addEventListener(event, show);
            });

            hideEvents.forEach(event => {
              button.addEventListener(event, hide);
            });
          </script>
        </div>
    </div>
  </div>
<% } %>
