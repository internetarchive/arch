{"version":3,"file":"arch-dataset-publishing-card-ab9bdb46.js","sources":["../../../src/src/archDatasetPublishingCard/src/styles.ts","../../../src/src/archDatasetPublishingCard/src/arch-dataset-publishing-card.ts"],"sourcesContent":["import { css } from \"lit\";\n\nimport { global, defaultButtonBgColor } from \"../../lib/styles\";\n\nexport default [\n  global,\n  css`\n    :host > div.container {\n      display: flex;\n    }\n\n    :host > div.container > div:first-child {\n      flex-grow: 1;\n    }\n\n    :host > div.container > button {\n      align-self: flex-start;\n    }\n\n    :host > div.container > button.cancel {\n      margin-right: 0.5rem;\n    }\n\n    h2 {\n      font-size: 1em;\n      margin: 0 0 0.75em 0;\n    }\n\n    /* Prevent items from overflow container: https://stackoverflow.com/a/66689926 */\n    div.detail {\n      min-width: 0;\n    }\n\n    div.metadata-display > dl,\n    div.metadata-display > arch-loading-indicator,\n    div.metadata-display > i {\n      margin-left: 2rem;\n    }\n\n    div.metadata-edit {\n      background-color: ${defaultButtonBgColor};\n      border-radius: 8px;\n      padding: 1rem 1.5rem;\n    }\n\n    dl > div,\n    dl > div:last-child {\n      margin-bottom: 0.75em;\n    }\n\n    [hidden] {\n      display: none;\n    }\n\n    div.form-buttons {\n      text-align: right;\n    }\n  `,\n];\n","import { LitElement, html } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators.js\";\n\nimport { isoStringToDateString } from \"../../lib/helpers\";\nimport {\n  Collection,\n  Job,\n  PublishedDatasetInfo,\n  PublishedDatasetMetadata,\n  PublishedDatasetMetadataApiResponse,\n  PublishedDatasetMetadataJSONSchema,\n  PublishedDatasetMetadataJSONSchemaProps,\n} from \"../../lib/types\";\nimport \"../../archLoadingIndicator/index\";\nimport \"../../archDatasetMetadataForm/index\";\nimport { ArchDatasetMetadataForm } from \"../../archDatasetMetadataForm/index\";\n\nimport styles from \"./styles\";\nimport * as _metadataSchema from \"../../archDatasetMetadataForm/src/schema.json\";\n\nconst metadataSchema = _metadataSchema as PublishedDatasetMetadataJSONSchema;\nconst propertiesOrder = metadataSchema.propertiesOrder as Array<string>;\n\nenum PublishState {\n  Loading = 0,\n  Unpublished,\n  PrePublish,\n  Publishing,\n  Published,\n  Unpublishing,\n}\n\nenum MetadataState {\n  Displaying,\n  Editing,\n  Saving,\n}\n\nconst orderedMetadataKeys = Object.keys(\n  metadataSchema.properties as object\n).sort((a, b) =>\n  propertiesOrder.indexOf(a) < propertiesOrder.indexOf(b) ? -1 : 1\n) as Array<keyof PublishedDatasetMetadata>;\n\nfunction getMetadataKeyTitle(k: keyof PublishedDatasetMetadata): string {\n  // Note that I can't figure out how to properly annotate metadataSchema.properties\n  // using something like PropertiesSchema from ajv/lib/types/json-schema.\n  return (metadataSchema.properties as PublishedDatasetMetadataJSONSchemaProps)[\n    k\n  ].title as string;\n}\n\n@customElement(\"arch-dataset-publishing-card\")\nexport class ArchDatasetPublishingCard extends LitElement {\n  @property({ type: String }) collectionId!: Collection[\"id\"];\n  @property({ type: String }) jobId!: Job[\"id\"];\n  @property({ type: Boolean }) isSample!: boolean;\n\n  @state() pubState: PublishState = PublishState.Loading;\n  @state() pubInfo: undefined | PublishedDatasetInfo = undefined;\n\n  @state() metadataState = MetadataState.Displaying;\n  @state() metadata: undefined | PublishedDatasetMetadataApiResponse =\n    undefined;\n\n  @query(\"arch-dataset-metadata-form\") metadataForm!: ArchDatasetMetadataForm;\n\n  static styles = styles;\n\n  connectedCallback() {\n    super.connectedCallback();\n    void this._fetchInitialData();\n  }\n\n  private get _sampleParam() {\n    /* Return a \"sample=[true|false]\" URL param string for the current isSample state */\n    return `sample=${this.isSample ? \"true\" : \"false\"}`;\n  }\n\n  private get _metadataFormData() {\n    /* Return the metadata <form> inputs as an object with Array-type values. */\n    const metadata: PublishedDatasetMetadataApiResponse = {};\n    const metadataPairs = Array.from(\n      new FormData(this.metadataForm.form).entries()\n    )\n      // Remove empty string values.\n      .filter(([, v]) => (v as string).trim() !== \"\")\n      // Replace any tabs with \" \" and \"\\n\" with \"<br>\", which should only ever\n      // occur in the case of <textarea>.\n      .map(([k, v]) => [\n        k,\n        (v as string).replaceAll(\"\\t\", \" \").replaceAll(\"\\n\", \"<br>\"),\n      ]) as Array<[keyof PublishedDatasetMetadataApiResponse, string]>;\n\n    for (const [name, value] of metadataPairs) {\n      metadata[name] = (metadata[name] ?? []).concat(value);\n    }\n    return metadata;\n  }\n\n  // TODO - make this less complex\n  // eslint-disable-next-line complexity\n  render() {\n    const { pubState } = this;\n    if (pubState === PublishState.Loading) {\n      return html`<arch-loading-indicator></arch-loading-indicator>`;\n    }\n    const { metadata } = this;\n    const pubInfo = this.pubInfo as PublishedDatasetInfo;\n    return html`\n      <div class=\"container\">\n        <div class=\"detail\">\n          <dl>\n            <div>\n              <dt>Last Published</dt>\n              <dd>\n                ${pubState === PublishState.Published\n                  ? isoStringToDateString(pubInfo.time)\n                  : \"never\"}\n              </dd>\n            </div>\n            ${pubState !== PublishState.Published\n              ? html``\n              : html`\n                  <div>\n                    <dt>ARK</dt>\n                    <dd>\n                      <a href=\"https://ark.archive.org/${pubInfo.ark}\"\n                        >${pubInfo.ark}</a\n                      >\n                    </dd>\n                  </div>\n                `}\n          </dl>\n\n          <!-- Metadata section header -->\n          <h2>\n            ${pubState < PublishState.PrePublish ||\n            pubState === PublishState.Publishing\n              ? \"\"\n              : pubState === PublishState.PrePublish\n              ? html`<i>Enter Metadata</i>`\n              : \"Metadata\"}\n            ${pubState < PublishState.Published ||\n            this.metadataState === MetadataState.Editing\n              ? \"\"\n              : html`\n                  <button\n                    class=\"text\"\n                    @click=${() => (this.metadataState = MetadataState.Editing)}\n                  >\n                    (edit)\n                  </button>\n                `}\n          </h2>\n\n          <!-- Metadata display list -->\n          <div\n            class=\"metadata-display\"\n            ?hidden=${pubState < PublishState.Published ||\n            this.metadataState === MetadataState.Editing}\n          >\n            ${metadata === undefined\n              ? html`<arch-loading-indicator></arch-loading-indicator>`\n              : Object.keys(metadata).length === 0\n              ? html`<i>none</i>`\n              : html`\n                  <dl>\n                    ${orderedMetadataKeys\n                      .filter((k) => metadata[k] !== undefined)\n                      .map((k) => {\n                        const title = getMetadataKeyTitle(k);\n                        let values = metadata[k] as string | Array<string>;\n                        if (!Array.isArray(values)) {\n                          values = [values];\n                        }\n                        return html`\n                          <div>\n                            <dt>${title}</dt>\n                            ${values.map((value) => html`<dd>${value}</dd>`)}\n                          </div>\n                        `;\n                      })}\n                  </dl>\n                `}\n          </div>\n\n          <!-- Metadata edit form -->\n          <div\n            class=\"metadata-edit\"\n            ?hidden=${pubState !== PublishState.PrePublish &&\n            this.metadataState !== MetadataState.Editing &&\n            this.metadataState !== MetadataState.Saving}\n          >\n            ${pubState !== PublishState.PrePublish &&\n            this.metadataState !== MetadataState.Editing &&\n            this.metadataState !== MetadataState.Saving\n              ? html``\n              : html`\n                  <arch-dataset-metadata-form\n                    metadata=\"${JSON.stringify(metadata ?? \"\")}\"\n                  >\n                  </arch-dataset-metadata-form>\n                `}\n            <br />\n            <div\n              ?hidden=${pubState === PublishState.PrePublish}\n              class=\"form-buttons\"\n            >\n              <button\n                type=\"button\"\n                @click=${() => (this.metadataState = MetadataState.Displaying)}\n                ?disabled=${this.metadataState === MetadataState.Saving}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"button\"\n                class=\"primary\"\n                @click=${() => this._saveMetadata()}\n                ?disabled=${this.metadataState === MetadataState.Saving}\n              >\n                ${this.metadataState === MetadataState.Saving\n                  ? html`<arch-loading-indicator\n                      style=\"--color: #fff\"\n                      text=\"Saving\"\n                    ></arch-loading-indicator>`\n                  : html`Save`}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <button\n          class=\"cancel\"\n          @click=${() => (this.pubState = PublishState.Unpublished)}\n          ?hidden=${pubState !== PublishState.PrePublish}\n        >\n          Cancel\n        </button>\n\n        <button\n          class=\"${pubState === PublishState.Unpublished\n            ? \"primary\"\n            : pubState === PublishState.PrePublish\n            ? \"success\"\n            : pubState === PublishState.Published\n            ? \"danger\"\n            : \"\"}\"\n          ?disabled=${pubState === PublishState.Publishing ||\n          pubState === PublishState.Unpublishing}\n          @click=${this._publishButtonClickHandler}\n        >\n          ${pubState === PublishState.Unpublished\n            ? \"Publish\"\n            : pubState === PublishState.PrePublish\n            ? \"Publish Now\"\n            : pubState === PublishState.Publishing\n            ? \"Publish in progress...\"\n            : pubState === PublishState.Published\n            ? \"Unpublish\"\n            : pubState === PublishState.Unpublishing\n            ? \"Unpublishing...\"\n            : \"\"}\n        </button>\n      </div>\n    `;\n  }\n\n  private async _fetchInitialData() {\n    // Fetch any existing publication info.\n    const pubInfo = await this._fetchPubInfo();\n    if (!pubInfo) {\n      // No publication job exists for this dataset.\n      this.pubState = PublishState.Unpublished;\n      this.metadata = {};\n      return;\n    }\n    // Check whether the job is in progress.\n    if (pubInfo.complete === false) {\n      this.pubState = PublishState.Publishing;\n      // Check again for published info in 3 seconds.\n      setTimeout(() => void this._fetchInitialData(), 3000);\n      return;\n    }\n    // Dataset has been published.\n    this.pubInfo = pubInfo;\n    this.pubState = PublishState.Published;\n    // Fetch the published metadata.\n    void this._pollItemMetadata();\n  }\n\n  private async _pollItemMetadata() {\n    /* Poll for the item metadata and save it once available. */\n    const { pubState } = this;\n    const pubInfo = this.pubInfo as PublishedDatasetInfo;\n    const metadata = await this._fetchItemMetadata(pubInfo.item);\n    if (metadata === undefined && pubState === PublishState.Published) {\n      // Try again in 3 seconds.\n      setTimeout(() => void this._pollItemMetadata(), 3000);\n    }\n    // Got it.\n    this.metadata = metadata;\n  }\n\n  private async _fetchPubInfo() {\n    /* Attempt to retrieve the info for any existing published dataset */\n    const response = await fetch(\n      `/api/petabox/${this.collectionId}/${this.jobId}?${this._sampleParam}`\n    );\n    if (response.status === 404) {\n      return undefined;\n    } else {\n      const pubInfo = (await response.json()) as PublishedDatasetInfo;\n      // Convert datetime string to Date.\n      pubInfo.time = new Date(pubInfo.time);\n      return pubInfo;\n    }\n  }\n\n  private async _fetchItemMetadata(itemId: PublishedDatasetInfo[\"item\"]) {\n    /* Attempt to retrieve the published item metadata */\n    const response = await fetch(\n      `/api/petabox/${this.collectionId}/metadata/${itemId}`\n    );\n    if (response.status === 404) {\n      return undefined;\n    }\n    return (await response.json()) as PublishedDatasetMetadataApiResponse;\n  }\n\n  private _publishButtonClickHandler() {\n    const metadataForm = this.metadataForm;\n    switch (this.pubState) {\n      case PublishState.Unpublished:\n        this.pubState = PublishState.PrePublish;\n        break;\n      case PublishState.PrePublish:\n        if (metadataForm.form.checkValidity()) {\n          void this._publish();\n        } else {\n          metadataForm.form.reportValidity();\n        }\n        break;\n      case PublishState.Published:\n        if (\n          window.confirm(\"Are you sure you want to unpublish this dataset?\")\n        ) {\n          void this._unpublish();\n        }\n        break;\n    }\n  }\n\n  private async _publish() {\n    const { collectionId, jobId, _metadataFormData: metadata } = this;\n    await fetch(\n      `/api/runjob/DatasetPublication/${collectionId}?${this._sampleParam}`,\n      {\n        method: \"POST\",\n        credentials: \"same-origin\",\n        mode: \"cors\",\n        body: JSON.stringify({\n          dataset: jobId,\n          metadata,\n        }),\n      }\n    );\n    this.pubState = PublishState.Publishing;\n    // Start polling for pub info after a lengthy timeout in order to\n    // give the backend time to register the job.\n    setTimeout(() => void this._fetchInitialData(), 30000);\n  }\n\n  private async _unpublish() {\n    const { collectionId, pubInfo } = this;\n    const { item: itemId } = pubInfo as PublishedDatasetInfo;\n    this.pubState = PublishState.Unpublishing;\n    await fetch(`/api/petabox/${collectionId}/delete/${itemId}`, {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      mode: \"cors\",\n      body: JSON.stringify({ delete: true }),\n    });\n    this.pubState = PublishState.Unpublished;\n    // Call fetchInitialData to reset the component state.\n    void this._fetchInitialData();\n  }\n\n  private async _saveMetadata() {\n    const { collectionId, pubInfo, _metadataFormData: metadata } = this;\n    const { item: itemId } = pubInfo as PublishedDatasetInfo;\n    this.metadata = metadata;\n    this.metadataState = MetadataState.Saving;\n    // Add empty array values for all unspecified metadata fields in order to delete\n    // any existing values from the item.\n    const finalMetadata = Object.assign(\n      Object.fromEntries(orderedMetadataKeys.map((k) => [k, []])),\n      metadata\n    );\n    await fetch(`/api/petabox/${collectionId}/metadata/${itemId}`, {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      mode: \"cors\",\n      body: JSON.stringify(finalMetadata),\n    });\n    this.metadataState = MetadataState.Displaying;\n  }\n}\n\n// Injects the tag into the global name space\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"arch-dataset-publishing-card\": ArchDatasetPublishingCard;\n  }\n}\n"],"names":["styles","global","css","defaultButtonBgColor","metadataSchema","_metadataSchema","propertiesOrder","PublishState","MetadataState","orderedMetadataKeys","Object","keys","properties","sort","a","b","indexOf","ArchDatasetPublishingCard","LitElement","constructor","this","pubState","Loading","pubInfo","undefined","metadataState","Displaying","metadata","connectedCallback","super","_fetchInitialData","_sampleParam","isSample","_metadataFormData","metadataPairs","Array","from","FormData","metadataForm","form","entries","filter","v","trim","map","k","replaceAll","name","value","_a","concat","render","html","Published","isoStringToDateString","time","ark","PrePublish","Publishing","Editing","length","title","getMetadataKeyTitle","values","isArray","Saving","JSON","stringify","_saveMetadata","Unpublished","Unpublishing","_publishButtonClickHandler","async","_fetchPubInfo","complete","setTimeout","_pollItemMetadata","_fetchItemMetadata","item","response","fetch","collectionId","jobId","status","json","Date","itemId","checkValidity","_publish","reportValidity","window","confirm","_unpublish","method","credentials","mode","body","dataset","delete","finalMetadata","assign","fromEntries","__decorate","property","type","String","prototype","Boolean","state","query","customElement"],"mappings":"6cAIA,IAAeA,EAAA,CACbC,EACAC,CAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAkCqBC;;;;;;;;;;;;;;;;;KCpB1B,MAAMC,EAAiBC,EACjBC,EAAkBF,EAAeE,gBAEvC,IAAKC,EASAC,GATL,SAAKD,GACHA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,aAAA,GAAA,cACD,CAPD,CAAKA,IAAAA,EAOJ,CAAA,IAED,SAAKC,GACHA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,OAAA,GAAA,QACD,CAJD,CAAKA,IAAAA,EAIJ,CAAA,IAED,MAAMC,EAAsBC,OAAOC,KACjCP,EAAeQ,YACfC,MAAK,CAACC,EAAGC,IACTT,EAAgBU,QAAQF,GAAKR,EAAgBU,QAAQD,IAAM,EAAI,IAY1D,IAAME,EAAN,cAAwCC,EAAxCC,kCAKIC,KAAAC,SAAyBd,EAAae,QACtCF,KAAOG,aAAqCC,EAE5CJ,KAAAK,cAAgBjB,EAAckB,WAC9BN,KAAQO,cACfH,CAyVH,CAnVCI,oBACEC,MAAMD,oBACDR,KAAKU,mBACX,CAEWC,mBAEV,MAAO,WAAUX,KAAKY,SAAW,OAAS,QAC3C,CAEWC,8BAEV,MAAMN,EAAgD,CAAA,EAChDO,EAAgBC,MAAMC,KAC1B,IAAIC,SAASjB,KAAKkB,aAAaC,MAAMC,WAGpCC,QAAO,EAAC,CAAGC,KAAgC,KAAxBA,EAAaC,SAGhCC,KAAI,EAAEC,EAAGH,KAAO,CACfG,EACCH,EAAaI,WAAW,KAAM,KAAKA,WAAW,KAAM,WAGzD,IAAK,MAAOC,EAAMC,KAAUd,EAC1BP,EAASoB,IAAuB,QAAdE,EAAAtB,EAASoB,UAAK,IAAAE,EAAAA,EAAI,IAAIC,OAAOF,GAEjD,OAAOrB,CACR,CAIDwB,SACE,MAAM9B,SAAEA,GAAaD,KACrB,GAAIC,IAAad,EAAae,QAC5B,OAAO8B,CAAI,oDAEb,MAAMzB,SAAEA,GAAaP,KACfG,EAAUH,KAAKG,QACrB,OAAO6B,CAAI;;;;;;;kBAOG/B,IAAad,EAAa8C,UACxBC,EAAsB/B,EAAQgC,MAC9B;;;cAGNlC,IAAad,EAAa8C,UACxBD,CAAI,GACJA,CAAI;;;;yDAIqC7B,EAAQiC;2BACtCjC,EAAQiC;;;;;;;;;cASrBnC,EAAWd,EAAakD,YAC1BpC,IAAad,EAAamD,WACtB,GACArC,IAAad,EAAakD,WAC1BL,CAAI,wBACJ;cACF/B,EAAWd,EAAa8C,WAC1BjC,KAAKK,gBAAkBjB,EAAcmD,QACjC,GACAP,CAAI;;;6BAGS,IAAOhC,KAAKK,cAAgBjB,EAAcmD;;;;;;;;;;sBAUjDtC,EAAWd,EAAa8C,WAClCjC,KAAKK,gBAAkBjB,EAAcmD;;mBAEtBnC,IAAbG,EACEyB,CAAI,oDAC6B,IAAjC1C,OAAOC,KAAKgB,GAAUiC,OACtBR,CAAI,cACJA,CAAI;;sBAEE3C,EACCgC,QAAQI,QAAsBrB,IAAhBG,EAASkB,KACvBD,KAAKC,IACJ,MAAMgB,EA/H9B,SAA6BhB,GAG3B,OAAQzC,EAAeQ,WACrBiC,GACAgB,KACJ,CAyHsCC,CAAoBjB,GAClC,IAAIkB,EAASpC,EAASkB,GAItB,OAHKV,MAAM6B,QAAQD,KACjBA,EAAS,CAACA,IAELX,CAAI;;kCAEDS;8BACJE,EAAOnB,KAAKI,GAAUI,CAAI,OAAOJ;;yBAEtC;;;;;;;;sBASH3B,IAAad,EAAakD,YACpCrC,KAAKK,gBAAkBjB,EAAcmD,SACrCvC,KAAKK,gBAAkBjB,EAAcyD;;cAEnC5C,IAAad,EAAakD,YAC5BrC,KAAKK,gBAAkBjB,EAAcmD,SACrCvC,KAAKK,gBAAkBjB,EAAcyD,OACjCb,CAAI,GACJA,CAAI;;gCAEYc,KAAKC,UAAUxC,QAAAA,EAAY;;;;;;wBAMnCN,IAAad,EAAakD;;;;;yBAKzB,IAAOrC,KAAKK,cAAgBjB,EAAckB;4BACvCN,KAAKK,gBAAkBjB,EAAcyD;;;;;;;yBAOxC,IAAM7C,KAAKgD;4BACRhD,KAAKK,gBAAkBjB,EAAcyD;;kBAE/C7C,KAAKK,gBAAkBjB,EAAcyD,OACnCb,CAAI;;;gDAIJA,CAAI;;;;;;;;mBAQL,IAAOhC,KAAKC,SAAWd,EAAa8D;oBACnChD,IAAad,EAAakD;;;;;;mBAM3BpC,IAAad,EAAa8D,YAC/B,UACAhD,IAAad,EAAakD,WAC1B,UACApC,IAAad,EAAa8C,UAC1B,SACA;sBACQhC,IAAad,EAAamD,YACtCrC,IAAad,EAAa+D;mBACjBlD,KAAKmD;;YAEZlD,IAAad,EAAa8D,YACxB,UACAhD,IAAad,EAAakD,WAC1B,cACApC,IAAad,EAAamD,WAC1B,yBACArC,IAAad,EAAa8C,UAC1B,YACAhC,IAAad,EAAa+D,aAC1B,kBACA;;;KAIX,CAEOE,0BAEN,MAAMjD,QAAgBH,KAAKqD,gBAC3B,OAAKlD,GAOoB,IAArBA,EAAQmD,UACVtD,KAAKC,SAAWd,EAAamD,gBAE7BiB,YAAW,KAAWvD,KAAKU,mBAAmB,GAAE,OAIlDV,KAAKG,QAAUA,EACfH,KAAKC,SAAWd,EAAa8C,eAExBjC,KAAKwD,sBAfRxD,KAAKC,SAAWd,EAAa8D,iBAC7BjD,KAAKO,SAAW,IAenB,CAEO6C,0BAEN,MAAMnD,SAAEA,GAAaD,KACfG,EAAUH,KAAKG,QACfI,QAAiBP,KAAKyD,mBAAmBtD,EAAQuD,WACtCtD,IAAbG,GAA0BN,IAAad,EAAa8C,WAEtDsB,YAAW,KAAWvD,KAAKwD,mBAAmB,GAAE,KAGlDxD,KAAKO,SAAWA,CACjB,CAEO6C,sBAEN,MAAMO,QAAiBC,MACrB,gBAAgB5D,KAAK6D,gBAAgB7D,KAAK8D,SAAS9D,KAAKW,gBAE1D,GAAwB,MAApBgD,EAASI,OAEN,CACL,MAAM5D,QAAiBwD,EAASK,OAGhC,OADA7D,EAAQgC,KAAO,IAAI8B,KAAK9D,EAAQgC,MACzBhC,CACR,CACF,CAEOiD,yBAAyBc,GAE/B,MAAMP,QAAiBC,MACrB,gBAAgB5D,KAAK6D,yBAAyBK,KAEhD,GAAwB,MAApBP,EAASI,OAGb,aAAcJ,EAASK,MACxB,CAEOb,6BACN,MAAMjC,EAAelB,KAAKkB,aAC1B,OAAQlB,KAAKC,UACX,KAAKd,EAAa8D,YAChBjD,KAAKC,SAAWd,EAAakD,WAC7B,MACF,KAAKlD,EAAakD,WACZnB,EAAaC,KAAKgD,gBACfnE,KAAKoE,WAEVlD,EAAaC,KAAKkD,iBAEpB,MACF,KAAKlF,EAAa8C,UAEdqC,OAAOC,QAAQ,qDAEVvE,KAAKwE,aAIjB,CAEOpB,iBACN,MAAMS,aAAEA,EAAYC,MAAEA,EAAOjD,kBAAmBN,GAAaP,WACvD4D,MACJ,kCAAkCC,KAAgB7D,KAAKW,eACvD,CACE8D,OAAQ,OACRC,YAAa,cACbC,KAAM,OACNC,KAAM9B,KAAKC,UAAU,CACnB8B,QAASf,EACTvD,eAINP,KAAKC,SAAWd,EAAamD,WAG7BiB,YAAW,KAAWvD,KAAKU,mBAAmB,GAAE,IACjD,CAEO0C,mBACN,MAAMS,aAAEA,EAAY1D,QAAEA,GAAYH,MAC1B0D,KAAMQ,GAAW/D,EACzBH,KAAKC,SAAWd,EAAa+D,mBACvBU,MAAM,gBAAgBC,YAAuBK,IAAU,CAC3DO,OAAQ,OACRC,YAAa,cACbC,KAAM,OACNC,KAAM9B,KAAKC,UAAU,CAAE+B,QAAQ,MAEjC9E,KAAKC,SAAWd,EAAa8D,YAExBjD,KAAKU,mBACX,CAEO0C,sBACN,MAAMS,aAAEA,EAAY1D,QAAEA,EAASU,kBAAmBN,GAAaP,MACvD0D,KAAMQ,GAAW/D,EACzBH,KAAKO,SAAWA,EAChBP,KAAKK,cAAgBjB,EAAcyD,OAGnC,MAAMkC,EAAgBzF,OAAO0F,OAC3B1F,OAAO2F,YAAY5F,EAAoBmC,KAAKC,GAAM,CAACA,EAAG,OACtDlB,SAEIqD,MAAM,gBAAgBC,cAAyBK,IAAU,CAC7DO,OAAQ,OACRC,YAAa,cACbC,KAAM,OACNC,KAAM9B,KAAKC,UAAUgC,KAEvB/E,KAAKK,cAAgBjB,EAAckB,UACpC,GApVMT,EAAMjB,OAAGA,EAbYsG,EAAA,CAA3BC,EAAS,CAAEC,KAAMC,UAA0CxF,EAAAyF,UAAA,oBAAA,GAChCJ,EAAA,CAA3BC,EAAS,CAAEC,KAAMC,UAA4BxF,EAAAyF,UAAA,aAAA,GACjBJ,EAAA,CAA5BC,EAAS,CAAEC,KAAMG,WAA8B1F,EAAAyF,UAAA,gBAAA,GAEvCJ,EAAA,CAARM,KAAsD3F,EAAAyF,UAAA,gBAAA,GAC9CJ,EAAA,CAARM,KAA8D3F,EAAAyF,UAAA,eAAA,GAEtDJ,EAAA,CAARM,KAAiD3F,EAAAyF,UAAA,qBAAA,GACzCJ,EAAA,CAARM,KACW3F,EAAAyF,UAAA,gBAAA,GAEyBJ,EAAA,CAApCO,EAAM,+BAAqE5F,EAAAyF,UAAA,oBAAA,GAZjEzF,EAAyBqF,EAAA,CADrCQ,EAAc,iCACF7F"}