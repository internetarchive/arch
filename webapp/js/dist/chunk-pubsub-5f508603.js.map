{"version":3,"file":"chunk-pubsub-5f508603.js","sources":["../../../src/src/lib/webservices/src/lib/pubsub.ts","../../../src/src/lib/pubsub.ts"],"sourcesContent":["const DEBUG = false;\n\nexport enum Topics {\n  API_SERVICE_READY = \"API_SERVICE_READY\",\n}\n\nexport type TopicStrings = keyof typeof Topics;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst topicSubscribersMap: Map<Topics, Function[]> = new Map(\n  Object.values(Topics).map((topic) => [topic, []])\n);\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function topicSubscribers(topic: Topics): Function[] {\n  return topicSubscribersMap.get(topic) || [];\n}\n\nfunction assertValidTopic(topic: TopicStrings): boolean {\n  return Boolean(Topics[topic]);\n}\n\nexport function subscribe<T>(topic: Topics, func: (props: T) => void): void {\n  /* Subscribe func to the specified topic.\n   */\n  assertValidTopic(topic);\n  // Do not subscribe func more than once.\n  if (!topicSubscribers(topic).includes(func)) {\n    topicSubscribers(topic).push(func);\n    if (DEBUG) {\n      console.debug(`${func.toString()} subscribed to ${topic}`);\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function unsubscribe(topic: Topics, func: Function): void {\n  /* Unsubscribe func from the specified topic.\n   */\n  assertValidTopic(topic);\n  topicSubscribersMap.set(\n    topic,\n    topicSubscribers(topic).filter((f) => f !== func)\n  );\n}\n\n// Define a monotonically increasing message ID integer.\nlet messageId = 0;\n\nexport async function publish<T>(topic: Topics, message: T): Promise<void> {\n  /* Publish the specified message to all topic subscribers.\n   */\n  assertValidTopic(topic);\n  messageId += 1;\n  if (DEBUG) {\n    console.debug(\n      `Publishing to ${topicSubscribers(topic).length} subscribers ` +\n        `on topic \"${topic}\" with message (id:${messageId}): ${JSON.stringify(\n          message\n        )}`\n    );\n  }\n  await Promise.all(\n    topicSubscribers(topic).map(\n      (func) => new Promise((resolve) => resolve(func(message, messageId)))\n    )\n  );\n}\n\n// Convenience methods that expose subscribing and publishing with typed messages\n\n// Factories for generating typed topic subscribers and publishers\nexport function _subscriberFactory<T>(\n  topic: Topics\n): (fn: (props: T) => void | Promise<void>) => void {\n  return (fn: (props: T) => void) => subscribe<T>(topic, fn);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _publisherFactory<T extends Record<any, any>>(topic: Topics) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (props: T, errorHandler?: (error: any) => void | undefined) =>\n    publish(topic, props)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .catch((error: any) => {\n        if (errorHandler !== undefined) {\n          errorHandler(error);\n        } else {\n          console.error(error);\n        }\n      });\n}\n\n// Message property types\n\nexport type ApiServiceReadyProps = Record<string, unknown>;\n","export * from \"./webservices/src/lib/pubsub\";\nimport { Topics } from \"./webservices/src/lib/pubsub\";\n\n// Extend the pubsub.Topics enum with ARCH-specific values.\ndeclare module \"./webservices/src/lib/pubsub\" {\n  enum Topics {\n    CREATE_SUB_COLLECTION = \"CREATE_SUB_COLLECTION\",\n    GENERATE_DATASET = \"GENERATE_DATASET\",\n  }\n}\n\n// Note that the above \"declare module ...\" only updates the type but does\n// not actually initialize the object with the extended values,\n// which we have to do manually??\n// https://stackoverflow.com/a/46760115/2327940\nObject.assign(Topics as Record<string, string>, {\n  CREATE_SUB_COLLECTION: \"CREATE_SUB_COLLECTION\",\n  GENERATE_DATASET: \"GENERATE_DATASET\",\n});\n"],"names":["Topics","Map","Object","values","map","topic","assign","CREATE_SUB_COLLECTION","GENERATE_DATASET"],"mappings":"IAEYA,GAAZ,SAAYA,GACVA,EAAA,kBAAA,mBACD,CAFD,CAAYA,IAAAA,EAEX,CAAA,IAKoD,IAAIC,IACvDC,OAAOC,OAAOH,GAAQI,KAAKC,GAAU,CAACA,EAAO,OCK/CH,OAAOI,OAAON,EAAkC,CAC9CO,sBAAuB,wBACvBC,iBAAkB"}