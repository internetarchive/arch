{"version":3,"file":"arch-sub-collection-builder-ff752dbf.js","sources":["../../../src/src/archSubCollectionBuilder/src/arch-sub-collection-builder.ts"],"sourcesContent":["import { LitElement, html } from \"lit\";\nimport { customElement, query, state } from \"lit/decorators.js\";\n\nimport { Collection } from \"../../lib/types\";\nimport { AlertClass } from \"../../archAlert/index\";\nimport \"../../archAlert/index\";\n\n@customElement(\"arch-sub-collection-builder\")\nexport class ArchSubCollectionBuilder extends LitElement {\n  @state() collections: Array<Collection> = [];\n  @state() sourceCollectionIds: Set<Collection[\"id\"]> = new Set();\n\n  @query(\"form\") form!: HTMLFormElement;\n  @query(\"select#source\") sourceSelect!: HTMLSelectElement;\n\n  static urlCollectionsParamName = \"cid[]\";\n\n  createRenderRoot() {\n    /* Disable the shadow root for this component to let in global styles.\n       https://stackoverflow.com/a/55213037 */\n    return this;\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n\n    // Fetch available Collections and Jobs.\n    await this.initCollections();\n    // Select any initial Collections.\n    this.sourceCollectionIds = new Set(\n      new URLSearchParams(window.location.search).getAll(\n        ArchSubCollectionBuilder.urlCollectionsParamName\n      )\n    );\n  }\n\n  private get _formData() {\n    /* Return the <form> inputs as an object with potential Array-type values. */\n    const data: Record<string, string | Array<string>> = {};\n    const pairs = Array.from(new FormData(this.form).entries()) as Array<\n      [string, string]\n    >;\n    for (const [name, value] of pairs) {\n      const existingValue = data[name];\n      if (existingValue === undefined) {\n        data[name] = value;\n      } else if (!Array.isArray(existingValue)) {\n        data[name] = [existingValue, value];\n      } else {\n        data[name] = existingValue.concat(value);\n      }\n    }\n    return data;\n  }\n\n  render() {\n    const { collections, sourceCollectionIds } = this;\n    const sourceCollections = collections.filter((x) =>\n      sourceCollectionIds.has(x.id)\n    );\n    return html`\n      <div class=\"row\">\n        <div class=\"large-12 columns\">\n          <arch-alert\n            .alertClass=${AlertClass.Primary}\n            .message=${'Use this form to create a custom collection by filtering the contents of one or more existing source collections. You may use as many of the filtering options below as you desire and leave others blank. <a href=\"https://arch-webservices.zendesk.com/hc/en-us/articles/16107865758228\" target=\"_blank\">Learn about options and common choices here</a>. ARCH will email you when your custom collection is ready to use.'}\n          >\n          </arch-alert>\n\n          <form>\n            <label for=\"sources\" class=\"required\"> Source Collection(s) </label>\n            <em id=\"sourceDesc\">\n              Select the collection(s) to use as the source for this custom\n              collection.\n            </em>\n            <select\n              name=\"sources\"\n              id=\"sources\"\n              aria-labelledby=\"source sourceDesc\"\n              required\n              multiple\n              size=\"8\"\n              style=\"resize: vertical;\"\n              ?disabled=${this.collections.length === 0}\n              @change=${this.sourceCollectionsChangeHandler}\n            >\n              ${this.collections.length === 0\n                ? html`<option value=\"\">Loading Collections...</option>`\n                : html``}\n              ${collections.map(\n                (collection) => html`\n                  <option\n                    value=\"${collection.id}\"\n                    ?selected=${sourceCollectionIds.has(collection.id)}\n                  >\n                    ${collection.name}\n                  </option>\n                `\n              )}\n            </select>\n\n            <label for=\"name\" class=\"required\"> Custom Collection Name </label>\n            <em id=\"nameDesc\">\n              Give your custom collection a name to describe its contents.\n            </em>\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              aria-labelledby=\"name nameDesc\"\n              placeholder=\"${sourceCollections.length > 0\n                ? sourceCollections[0].name\n                : \"Example Collection\"} - My filters\"\n              required\n            />\n\n            <label for=\"surts\"> SURT Prefix(es) </label>\n            <em id=\"surtsDesc\">\n              Choose\n              <a\n                href=\"https://arch-webservices.zendesk.com/hc/en-us/articles/14410683244948#document\"\n                target=\"_blank\"\n                >web documents</a\n              >\n              to include in your custom collection by their\n              <a\n                href=\"https://arch-webservices.zendesk.com/hc/en-us/articles/14410683244948#surt\"\n                target=\"_blank\"\n                >SURT prefix/es</a\n              >. Separate multiple SURTs with a <code>|</code> character and no\n              space in-between.\n            </em>\n            <input\n              type=\"text\"\n              name=\"surtPrefixesOR\"\n              id=\"surts\"\n              aria-labelledby=\"surts surtsDesc\"\n              placeholder=\"org,archive|gov,congress)/committees\"\n            />\n\n            <label for=\"timestampFrom\"> Crawl Date (start) </label>\n            <em id=\"timestampFromDesc\">\n              Specify the earliest in a range of\n              <a\n                href=\"https://arch-webservices.zendesk.com/hc/en-us/articles/14410683244948#timestamp\"\n                target=\"_blank\"\n                >timestamps</a\n              >\n              to include in your custom collection. Enter a full timestamp (in\n              the <code>yyyyMMddHHmmSS</code> format), a prefix (ex.\n              <code>yyyyMM</code>), or leave blank to include all web documents\n              going back to the earliest collected.\n            </em>\n            <input\n              type=\"text\"\n              name=\"timestampFrom\"\n              id=\"timestampFrom\"\n              aria-labelledby=\"timestampFrom timestampFromDesc\"\n              placeholder=\"19960115\"\n            />\n\n            <label for=\"timestampTo\"> Crawl Date (end) </label>\n            <em id=\"timestampToDesc\">\n              Specify the latest in a range of\n              <a\n                href=\"https://arch-webservices.zendesk.com/hc/en-us/articles/14410683244948#timestamp\"\n                target=\"_blank\"\n                >timestamps</a\n              >\n              to include in your custom collection. Enter a full timestamp (in\n              the <code>yyyyMMddHHmmSS</code> format), a prefix (ex.\n              <code>yyyyMM</code>), or leave blank to include all web documents\n              up to the most recent collected.\n            </em>\n            <input\n              type=\"text\"\n              name=\"timestampTo\"\n              id=\"timestampTo\"\n              aria-labelledby=\"timestampTo timestampToDesc\"\n              placeholder=\"19991231235959\"\n            />\n\n            <label for=\"status\"> HTTP Status </label>\n            <em id=\"statusDesc\">\n              Choose web documents to include in your custom collection by their\n              <a\n                href=\"https://arch-webservices.zendesk.com/hc/en-us/articles/14410683244948#status\"\n                target=\"_blank\"\n                >HTTP status code/s</a\n              >. Separate multiple status codes with a <code>|</code> character\n              and no space in-between.\n            </em>\n            <input\n              type=\"text\"\n              name=\"statusPrefixesOR\"\n              id=\"status\"\n              aria-labelledby=\"status statusDesc\"\n              placeholder=\"200\"\n            />\n\n            <label for=\"mime\"> MIME Type </label>\n            <em id=\"mimeDesc\">\n              Choose web documents to include in your custom collection by their\n              file format/s, expressed as\n              <a\n                href=\"https://arch-webservices.zendesk.com/hc/en-us/articles/14410683244948#mime\"\n                target=\"_blank\"\n                >MIME type/s</a\n              >. Separate multiple MIME types with a | character and no space\n              in-between.\n            </em>\n            <input\n              type=\"text\"\n              name=\"mimesOR\"\n              id=\"mime\"\n              aria-labelledby=\"mime mimeDesc\"\n              placeholder=\"text/html|application/pdf\"\n            />\n\n            <button type=\"submit\" @click=${this.createSubCollection}>\n              Create Custom Collection\n            </button>\n          </form>\n        </div>\n      </div>\n    `;\n  }\n\n  private async initCollections() {\n    this.collections = (await (\n      await fetch(\"/api/collections\")\n    ).json()) as Array<Collection>;\n  }\n\n  private setSourceCollectionIdsUrlParam(\n    collectionIds: Array<Collection[\"id\"]>\n  ) {\n    const { urlCollectionsParamName } = ArchSubCollectionBuilder;\n    const url = new URL(window.location.href);\n    // Unconditionally delete the params in preparation for any params.append()\n    url.searchParams.delete(urlCollectionsParamName);\n    collectionIds.forEach((collectionId) =>\n      url.searchParams.append(urlCollectionsParamName, collectionId)\n    );\n    history.replaceState(null, \"\", url.toString());\n  }\n\n  private sourceCollectionsChangeHandler(e: Event) {\n    const collectionIds = Array.from(\n      (e.target as HTMLSelectElement).selectedOptions\n    ).map((el) => el.value);\n    this.sourceCollectionIds = new Set(collectionIds);\n    this.setSourceCollectionIdsUrlParam(collectionIds);\n  }\n\n  private async createSubCollection(e: Event) {\n    // Prevent the form submission.\n    e.preventDefault();\n    // Check form validity and abort if invalid.\n    const { form } = this;\n    if (!form.checkValidity()) {\n      form.reportValidity();\n      return;\n    }\n    // Disable the button.\n    const button = e.target as HTMLButtonElement;\n    button.disabled = true;\n\n    // Read and filter the form data.\n    const data = Object.fromEntries(\n      Array.from(Object.entries(this._formData))\n        // Remove empty fields\n        .filter(([, v]) => v !== \"\")\n        // Split pipe-delimited multi-valued strings into arrays.\n        .map(([k, v]) => [\n          k,\n          k === \"surtPrefixesOR\" || k === \"statusPrefixesOR\" || k === \"mimesOR\"\n            ? (v as string).split(\"|\")\n            : v,\n        ])\n    );\n\n    // Pop data.sources, which will either be a string (for a single selection)\n    // or an string[] (for multiple selections).\n    const sources = data.sources;\n    delete data.sources;\n    // Handle single vs. multiple source collection cases.\n    let urlCollectionId;\n    if (!Array.isArray(sources)) {\n      // Specify the single Collection ID as the url param.\n      urlCollectionId = sources;\n    } else {\n      // Specify the special \"UNION-UDQ\" Collection ID as the url param.\n      urlCollectionId = \"UNION-UDQ\";\n      // Assign sources to data.input which is expected by\n      // DerivationJobConf.jobInPath() for Union-type collections.\n      data.input = sources;\n    }\n\n    // Make the request.\n    const res = await fetch(`/api/runjob/UserDefinedQuery/${urlCollectionId}`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    });\n    if (res.ok) {\n      // Request was successful - redirect to collections table.\n      window.location.href = \"/collections\";\n    } else {\n      // Display an alert.\n      window.alert(\"Could not create Sub-Collection\");\n      // Re-enable the button.\n      button.disabled = false;\n    }\n  }\n}\n\n// Injects the tag into the global name space\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"arch-sub-collection-builder\": ArchSubCollectionBuilder;\n  }\n}\n"],"names":["ArchSubCollectionBuilder","ArchSubCollectionBuilder_1","LitElement","constructor","this","collections","sourceCollectionIds","Set","createRenderRoot","async","super","connectedCallback","initCollections","URLSearchParams","window","location","search","getAll","urlCollectionsParamName","_formData","data","pairs","Array","from","FormData","form","entries","name","value","existingValue","undefined","isArray","concat","render","sourceCollections","filter","x","has","id","html","AlertClass","Primary","length","sourceCollectionsChangeHandler","map","collection","createSubCollection","fetch","json","setSourceCollectionIdsUrlParam","collectionIds","url","URL","href","searchParams","delete","forEach","collectionId","append","history","replaceState","toString","e","target","selectedOptions","el","preventDefault","checkValidity","reportValidity","button","disabled","Object","fromEntries","v","k","split","sources","urlCollectionId","input","method","body","JSON","stringify","headers","ok","alert","__decorate","state","prototype","query","customElement"],"mappings":"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"}