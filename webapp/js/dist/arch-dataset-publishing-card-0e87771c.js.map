{"version":3,"file":"arch-dataset-publishing-card-0e87771c.js","sources":["../../../src/src/archDatasetPublishingCard/src/styles.ts","../../../src/src/archDatasetPublishingCard/src/arch-dataset-publishing-card.ts"],"sourcesContent":["import { css } from \"lit\";\n\nimport { global } from \"../../lib/styles\";\n\nexport default [\n  global,\n  css`\n    :host > div.container {\n      display: flex;\n    }\n\n    :host > div.container > div:first-child {\n      flex-grow: 1;\n    }\n\n    :host > div.container > button {\n      align-self: flex-start;\n    }\n\n    :host > div.container > button.cancel {\n      margin-right: 0.5rem;\n    }\n\n    h2 {\n      font-size: 1em;\n      margin: 0 0 0.75em 0;\n    }\n\n    /* Prevent items from overflow container: https://stackoverflow.com/a/66689926 */\n    div.detail {\n      min-width: 0;\n    }\n\n    div.metadata-display > dl,\n    div.metadata-display > arch-loading-indicator,\n    div.metadata-display > i,\n    div.metadata-edit {\n      margin-left: 2rem;\n    }\n\n    dl > div,\n    dl > div:last-child {\n      margin-bottom: 0.75em;\n    }\n\n    [hidden] {\n      display: none;\n    }\n  `,\n];\n","import { LitElement, html } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators.js\";\n\nimport { isoStringToDateString } from \"../../lib/helpers\";\nimport {\n  Collection,\n  Job,\n  JobState,\n  PublishedDatasetInfo,\n  PublishedDatasetMetadata,\n  PublishedDatasetMetadataJSONSchema,\n  PublishedDatasetMetadataValue,\n  PublishedDatasetMetadataKeys,\n} from \"../../lib/types\";\nimport \"../../archLoadingIndicator/index\";\nimport \"../../archDatasetMetadataForm/index\";\n\nimport styles from \"./styles\";\nimport * as metadataSchema from \"../../archDatasetMetadataForm/src/schema.json\";\n\nenum PublishState {\n  Loading = 0,\n  Unpublished,\n  PrePublish,\n  Publishing,\n  Published,\n}\n\nenum MetadataState {\n  Displaying,\n  Editing,\n  Saving,\n}\n\nconst orderedMetadataKeys = Array.from(\n  Object.keys(PublishedDatasetMetadataKeys)\n) as Array<PublishedDatasetMetadataKeys>;\n\nfunction getMetadataKeyTitle(k: PublishedDatasetMetadataKeys) {\n  return (metadataSchema as PublishedDatasetMetadataJSONSchema).properties[k]\n    .title;\n}\n\n@customElement(\"arch-dataset-publishing-card\")\nexport class ArchDatasetPublishingCard extends LitElement {\n  @property({ type: String }) collectionId!: Collection[\"id\"];\n  @property({ type: String }) jobId!: Job[\"id\"];\n  @property({ type: Boolean }) isSample!: boolean;\n\n  @state() pubState: PublishState = PublishState.Loading;\n  @state() pubInfo: undefined | PublishedDatasetInfo = undefined;\n\n  @state() metadataState = MetadataState.Displaying;\n  @state() metadata: undefined | PublishedDatasetMetadata = undefined;\n\n  @query(\"arch-dataset-metadata-form\") metadataForm!: HTMLFormElement;\n\n  static styles = styles;\n\n  connectedCallback() {\n    super.connectedCallback();\n    void this._fetchInitialData();\n  }\n\n  private get _sampleParam() {\n    /* Return a \"sample=[true|false]\" URL param string for the current isSample state */\n    return `sample=${this.isSample ? \"true\" : \"false\"}`;\n  }\n\n  private get _metadataFormData() {\n    /* Return the metadata <form> inputs as an object with Array-type values. */\n    const metadata: PublishedDatasetMetadata = {};\n    const metadataPairs = Array.from(\n      new FormData(this.metadataForm.form).entries()\n    ) as Array<[PublishedDatasetMetadataKeys, string]>;\n    for (let [name, value] of metadataPairs) {\n      // Replace any tabs with \" \" and \"\\n\" with \"<br>\", which should only ever\n      // occur in the case of <textarea>.\n      value = value.replaceAll(\"\\t\", \" \").replaceAll(\"\\n\", \"<br>\");\n      metadata[name] = (metadata[name] ?? []).concat(value);\n    }\n    return metadata;\n  }\n\n  render() {\n    const { pubState } = this;\n    if (pubState === PublishState.Loading) {\n      return html`<arch-loading-indicator></arch-loading-indicator>`;\n    }\n    const { metadata } = this;\n    const pubInfo = this.pubInfo as PublishedDatasetInfo;\n    return html`\n      <div class=\"container\">\n        <div class=\"detail\">\n          <dl>\n            <div>\n              <dt>Last Published</dt>\n              <dd>\n                ${pubState === PublishState.Published\n                  ? isoStringToDateString(pubInfo.time)\n                  : \"never\"}\n              </dd>\n            </div>\n            ${pubState !== PublishState.Published\n              ? html``\n              : html`\n                  <div>\n                    <dt>ARK</dt>\n                    <dd>\n                      <a href=\"https://ark.archive.org/${pubInfo.ark}\"\n                        >${pubInfo.ark}</a\n                      >\n                    </dd>\n                  </div>\n                `}\n          </dl>\n\n          <!-- Metadata section header -->\n          <h2>\n            ${pubState < PublishState.PrePublish ||\n            pubState === PublishState.Publishing\n              ? \"\"\n              : pubState === PublishState.PrePublish\n              ? html`<i>Enter Metadata</i>`\n              : \"Metadata\"}\n            ${pubState < PublishState.Published ||\n            this.metadataState === MetadataState.Editing\n              ? \"\"\n              : html`\n                  <button\n                    class=\"text\"\n                    @click=${() => (this.metadataState = MetadataState.Editing)}\n                  >\n                    (edit)\n                  </button>\n                `}\n          </h2>\n\n          <!-- Metadata display list -->\n          <div\n            class=\"metadata-display\"\n            ?hidden=${pubState < PublishState.Published ||\n            this.metadataState === MetadataState.Editing}\n          >\n            ${metadata === undefined\n              ? html`<arch-loading-indicator></arch-loading-indicator>`\n              : Object.keys(metadata).length === 0\n              ? html`<i>none</i>`\n              : html`\n                  <dl>\n                    ${orderedMetadataKeys\n                      .filter((k) => metadata[k] !== undefined)\n                      .map((k) => {\n                        const title = getMetadataKeyTitle(k);\n                        let values = metadata[\n                          k\n                        ] as PublishedDatasetMetadataValue;\n                        if (!Array.isArray(values)) {\n                          values = [values];\n                        }\n                        return html`\n                          <div>\n                            <dt>${title}</dt>\n                            ${values.map((value) => html`<dd>${value}</dd>`)}\n                          </div>\n                        `;\n                      })}\n                  </dl>\n                `}\n          </div>\n\n          <!-- Metadata edit form -->\n          <div\n            class=\"metadata-edit\"\n            ?hidden=${pubState !== PublishState.PrePublish &&\n            this.metadataState !== MetadataState.Editing}\n          >\n            ${pubState !== PublishState.PrePublish &&\n            this.metadataState !== MetadataState.Editing\n              ? html``\n              : html`\n                  <arch-dataset-metadata-form\n                    metadata=\"${JSON.stringify(metadata || {})}\"\n                  >\n                  </arch-dataset-metadata-form>\n                `}\n            <br />\n            <span ?hidden=${pubState === PublishState.PrePublish}>\n              <button\n                type=\"button\"\n                @click=${() => (this.metadataState = MetadataState.Displaying)}\n                ?disabled=${this.metadataState === MetadataState.Saving}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"button\"\n                class=\"primary\"\n                @click=${() => this._saveMetadata()}\n                ?disabled=${this.metadataState === MetadataState.Saving}\n              >\n                Save\n              </button>\n            </span>\n          </div>\n        </div>\n\n        <button\n          class=\"cancel\"\n          @click=${() => (this.pubState = PublishState.Unpublished)}\n          ?hidden=${pubState !== PublishState.PrePublish}\n        >\n          Cancel\n        </button>\n\n        <button\n          class=\"${pubState === PublishState.Unpublished\n            ? \"primary\"\n            : pubState === PublishState.PrePublish\n            ? \"success\"\n            : \"\"}\"\n          ?disabled=${pubState !== PublishState.Unpublished &&\n          pubState !== PublishState.PrePublish}\n          @click=${this._buttonClickHandler}\n        >\n          ${pubState === PublishState.Unpublished\n            ? \"Publish\"\n            : pubState === PublishState.PrePublish\n            ? \"Publish Now\"\n            : pubState === PublishState.Publishing\n            ? \"Publish in progress...\"\n            : \"Published\"}\n        </button>\n      </div>\n    `;\n  }\n\n  private async _fetchInitialData() {\n    // Fetch any existing publication info.\n    const pubInfo = await this._fetchPubInfo();\n    if (!pubInfo) {\n      // No publication info exists / dataset has not been published.\n      // Check whether a publish is in progress. Note that this check is\n      // collection-specific, not dataset-specific.\n      const isPublishing = await this._publishInProgress();\n      if (!isPublishing) {\n        // A publish is not in progress...this dataset is unpublished.\n        this.pubState = PublishState.Unpublished;\n      } else {\n        // A publish is in progress.\n        this.pubState = PublishState.Publishing;\n        // Check again for published info in 3 seconds.\n        setTimeout(() => void this._fetchInitialData(), 3000);\n      }\n      return;\n    }\n    // Publication info does exist / dataset has been published.\n    this.pubInfo = pubInfo;\n    this.pubState = PublishState.Published;\n    // Fetch the published metadata.\n    void this._pollItemMetadata();\n  }\n\n  private async _pollItemMetadata() {\n    /* Poll for the item metadata and save it once available. */\n    const pubInfo = this.pubInfo as PublishedDatasetInfo;\n    const metadata = await this._fetchItemMetadata(pubInfo.item);\n    if (metadata === undefined) {\n      // Try again in 3 seconds.\n      setTimeout(() => void this._pollItemMetadata(), 3000);\n    }\n    // Got it.\n    this.metadata = metadata;\n  }\n\n  private async _fetchPubInfo() {\n    /* Attempt to retrieve the info for any existing published dataset */\n    const response = await fetch(\n      `/api/petabox/${this.collectionId}/${this.jobId}?${this._sampleParam}`\n    );\n    if (response.status === 404) {\n      return undefined;\n    } else {\n      const pubInfo = (await response.json()) as PublishedDatasetInfo;\n      // Convert datetime string to Date.\n      pubInfo.time = new Date(pubInfo.time);\n      return pubInfo;\n    }\n  }\n\n  private async _publishInProgress() {\n    const { collectionId } = this;\n    const jobState = (await (\n      await fetch(\n        `/api/jobstate/DatasetPublication/${collectionId}?${this._sampleParam}`\n      )\n    ).json()) as JobState;\n    // The startTime and(?) finishedTime fields will be absent for a Collection\n    // with no published datasets.\n    const startTime = Date.parse(jobState.startTime ?? \"\");\n    const finishedTime = Date.parse(jobState.finishedTime ?? \"\");\n    if (Number.isNaN(startTime)) {\n      // startTime is not a valid time string, so return false.\n      return false;\n    } else if (Number.isNaN(finishedTime)) {\n      // startTime is a valid time string but finishedTime is not, so return true.\n      return true;\n    } else {\n      // startTime and finishedTime are both valid time strings, so return whether\n      // startTime is greater than finishedTime.\n      return startTime > finishedTime;\n    }\n  }\n\n  private async _fetchItemMetadata(itemId: PublishedDatasetInfo[\"item\"]) {\n    /* Attempt to retrieve the published item metadata */\n    const response = await fetch(\n      `/api/petabox/${this.collectionId}/metadata/${itemId}`\n    );\n    if (response.status === 404) {\n      return undefined;\n    }\n    return (await response.json()) as PublishedDatasetMetadata;\n  }\n\n  private _buttonClickHandler() {\n    const { metadataForm } = this;\n    switch (this.pubState) {\n      case PublishState.Unpublished:\n        this.pubState = PublishState.PrePublish;\n        break;\n      case PublishState.PrePublish:\n        if (metadataForm.form.checkValidity()) {\n          void this._publish();\n        } else {\n          metadataForm.form.reportValidity();\n        }\n        break;\n    }\n  }\n\n  private async _publish() {\n    const { collectionId, jobId, _metadataFormData: metadata } = this;\n    await fetch(\n      `/api/runjob/DatasetPublication/${collectionId}?${this._sampleParam}`,\n      {\n        method: \"POST\",\n        credentials: \"same-origin\",\n        mode: \"cors\",\n        body: JSON.stringify({\n          dataset: jobId,\n          metadata,\n        }),\n      }\n    );\n    this.pubState = PublishState.Publishing;\n    // Start polling for pub info.\n    void this._fetchInitialData();\n  }\n\n  private async _saveMetadata() {\n    const { collectionId, pubInfo, _metadataFormData: metadata } = this;\n    const { item: itemId } = pubInfo as PublishedDatasetInfo;\n    this.metadata = metadata;\n    this.metadataState = MetadataState.Saving;\n    // Add empty array values for all unspecified metadata fields in order to delete\n    // any existing values from the item.\n    const finalMetadata = Object.assign(\n      Object.fromEntries(orderedMetadataKeys.map((k) => [k, []])),\n      metadata\n    );\n    await fetch(`/api/petabox/${collectionId}/metadata/${itemId}`, {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      mode: \"cors\",\n      body: JSON.stringify(finalMetadata),\n    });\n    this.metadataState = MetadataState.Displaying;\n  }\n}\n\n// Injects the tag into the global name space\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"arch-dataset-publishing-card\": ArchDatasetPublishingCard;\n  }\n}\n"],"names":["PublishState","MetadataState","styles","global","css","orderedMetadataKeys","Array","from","Object","keys","PublishedDatasetMetadataKeys","ArchDatasetPublishingCard","LitElement","constructor","this","pubState","Loading","pubInfo","undefined","metadataState","Displaying","metadata","connectedCallback","super","_fetchInitialData","_sampleParam","isSample","_metadataFormData","metadataPairs","FormData","metadataForm","form","entries","name","value","replaceAll","_a","concat","render","html","Published","isoStringToDateString","time","ark","PrePublish","Publishing","Editing","length","filter","k","map","title","metadataSchema.properties","getMetadataKeyTitle","values","isArray","JSON","stringify","Saving","_saveMetadata","Unpublished","_buttonClickHandler","async","_fetchPubInfo","_pollItemMetadata","_publishInProgress","setTimeout","_fetchItemMetadata","item","response","fetch","collectionId","jobId","status","json","Date","jobState","startTime","parse","finishedTime","_b","Number","isNaN","itemId","checkValidity","_publish","reportValidity","method","credentials","mode","body","dataset","finalMetadata","assign","fromEntries","__decorate","property","type","String","prototype","Boolean","state","query","customElement"],"mappings":"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"}